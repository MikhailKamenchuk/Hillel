"use strict";var hcner=document.querySelector(".header"),newDiv=document.createElement("div");newDiv.className="clock",hcner.appendChild(newDiv);var colon=document.createElement("span");colon.innerHTML=" : ";var hourSpan=document.createElement("span");hourSpan.id="hr",hourSpan.innerHTML="00",newDiv.appendChild(hourSpan),newDiv.appendChild(colon),newDiv.appendChild(colon);var minSpan=document.createElement("span");minSpan.id="min",minSpan.innerHTML="00",newDiv.appendChild(minSpan),newDiv.appendChild(colon.cloneNode(!0));var secSpan=document.createElement("span");secSpan.id="sec",secSpan.innerHTML="00",newDiv.appendChild(secSpan);var d=void 0,h=void 0,m=void 0,s=void 0,animate=void 0;function init(){d=new Date,h=d.getHours(),m=d.getMinutes(),s=d.getSeconds(),animate=setTimeout(init,1e3),clock()}function clock(){60==++s?(s=0,m++):60==m?(m=0,h++):24==h&&(h=0),go("sec",s),go("min",m),go("hr",h)}function go(n,e){e<10&&(e="0"+e),document.getElementById(n).innerHTML=e}window.onload=init;
let hcner = document.querySelector('.header');

let newDiv = document.createElement('div');
newDiv.className = "clock";
hcner.appendChild(newDiv);
let colon = document.createElement('span');
colon.innerHTML = " : ";
let hourSpan = document.createElement('span');
hourSpan.id = "hr";
hourSpan.innerHTML = "00";
newDiv.appendChild(hourSpan);
newDiv.appendChild(colon);
newDiv.appendChild(colon);
let minSpan = document.createElement('span');
minSpan.id = "min";
minSpan.innerHTML = "00";
newDiv.appendChild(minSpan);
newDiv.appendChild(colon.cloneNode(true));
let secSpan = document.createElement('span');
secSpan.id = "sec";
secSpan.innerHTML = "00";
newDiv.appendChild(secSpan);

let d;
let h;
let m;
let s;
let animate;

function init(){
	d = new Date();
	h = d.getHours();
	m = d.getMinutes();
	s = d.getSeconds();
	animate = setTimeout(init, 1000)
	clock();

};

function clock(){
	s++;
	if (s == 60){
		s = 0;
		m++;
	} else if (m == 60){
		m = 0;
		h++;
	} else if(h == 24){
		h = 0;
	}
	go('sec', s);
	go('min', m);
	go('hr', h);
}

function go(id, val){
	if (val < 10){
		val = '0' + val;
	}
	document.getElementById(id).innerHTML = val;
}

window.onload = init;


let hcner = document.querySelector('.header');

let newDiv = document.createElement('div');
newDiv.className = "clock";
hcner.appendChild(newDiv);
let colon = document.createElement('span');
colon.innerHTML = " : ";
let hourSpan = document.createElement('span');
hourSpan.id = "hr";
hourSpan.innerHTML = "00";
newDiv.appendChild(hourSpan);
newDiv.appendChild(colon);
newDiv.appendChild(colon);
let minSpan = document.createElement('span');
minSpan.id = "min";
minSpan.innerHTML = "00";
newDiv.appendChild(minSpan);
newDiv.appendChild(colon.cloneNode(true));
let secSpan = document.createElement('span');
secSpan.id = "sec";
secSpan.innerHTML = "00";
newDiv.appendChild(secSpan);

let d;
let h;
let m;
let s;
let animate;

function init(){
	d = new Date();
	h = d.getHours();
	m = d.getMinutes();
	s = d.getSeconds();
	animate = setTimeout(init, 1000)
	clock();

};

function clock(){
	s++;
	if (s == 60){
		s = 0;
		m++;
	} else if (m == 60){
		m = 0;
		h++;
	} else if(h == 24){
		h = 0;
	}
	go('sec', s);
	go('min', m);
	go('hr', h);
}

function go(id, val){
	if (val < 10){
		val = '0' + val;
	}
	document.getElementById(id).innerHTML = val;
}

window.onload = init;


let hcner = document.querySelector('.header');

let newDiv = document.createElement('div');
newDiv.className = "clock";
hcner.appendChild(newDiv);
let colon = document.createElement('span');
colon.innerHTML = " : ";
let hourSpan = document.createElement('span');
hourSpan.id = "hr";
hourSpan.innerHTML = "00";
newDiv.appendChild(hourSpan);
newDiv.appendChild(colon);
newDiv.appendChild(colon);
let minSpan = document.createElement('span');
minSpan.id = "min";
minSpan.innerHTML = "00";
newDiv.appendChild(minSpan);
newDiv.appendChild(colon.cloneNode(true));
let secSpan = document.createElement('span');
secSpan.id = "sec";
secSpan.innerHTML = "00";
newDiv.appendChild(secSpan);

let d;
let h;
let m;
let s;
let animate;

function init(){
	d = new Date();
	h = d.getHours();
	m = d.getMinutes();
	s = d.getSeconds();
	animate = setTimeout(init, 1000)
	clock();

};

function clock(){
	s++;
	if (s == 60){
		s = 0;
		m++;
	} else if (m == 60){
		m = 0;
		h++;
	} else if(h == 24){
		h = 0;
	}
	go('sec', s);
	go('min', m);
	go('hr', h);
}

function go(id, val){
	if (val < 10){
		val = '0' + val;
	}
	document.getElementById(id).innerHTML = val;
}

window.onload = init;


let HideElements = function(main, method){
  let self = this;
  let container = document.querySelector(main);
  let seriatim = method;
  this.btn = container.querySelector('.btn-for-promise');
  this.indicator = container.querySelector('.my-bar');
  this.imagesInPromise = container.querySelectorAll('.for-image');
  this.textInPromise = container.querySelectorAll('.content-in-progressbar');
  this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
  this.hideProgress = function(){
	self.indicator.style.width = "0";
  }
  
  this.hideEl = function(el){
        el.style.width = "0";
		el.style.padding = "0";
		el.style.height = "0";
  }
  
  this.hideImages = function(i){
    if(seriatim === true){
      for(i = 0; i < self.imagesInPromise.length; i++){
          self.hideEl(self.imagesInPromise[i]);
      }
    }else{
      self.hideEl(self.imagesInPromise[i]);
    }
  }
  
  this.hideText = function(i){
    if(seriatim === true){
      for(i = 0; i < self.textInPromise.length; i++){
          self.hideEl(self.textInPromise[i]);
      }
    } else{
      self.hideEl(self.textInPromise[i]);
    }
  }
  
  this.hideHeders = function(i){
    if(seriatim === true){
      for(i = 0; i < self.headsInPromise.length; i++){
          self.hideEl(self.headsInPromise[i]);
      }
    }else{
      self.hideEl(self.headsInPromise[i]);
    }
  }
  
  let promise = new Promise((resolve, reject) => {
	resolve(self.btn.addEventListener('click', self.hideProgress))
  });
  if(seriatim === true){
    promise.then(function(){
      return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages();
      }))
    }).then(function(){
      return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText();
      }))
    }).then(function(){
      return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders();
      }))
    })
  } else {
      promise.then(function(){
        return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(0);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(0);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(0);
        }))
      })
    
    for(let i = 1; i < self.textInPromise.length; i++){  
      promise.then(function(){
        return Promise.resolve(self.headsInPromise[i - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(i);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(i);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(i);
        }))
      })
    }
  }
};


let forFirstProgressbar = new HideElements('.first-progressbar', true);
let forSecondProgressbar = new HideElements('.second-progressbar', false);





// let HideElements = function(main, method){
//   let self = this;
//   let container = document.querySelector(main);
//   let seriatim = method;
//   this.btn = container.querySelector('.btn-for-promise');
//   this.indicator = container.querySelector('.my-bar');
//   this.imagesInPromise = container.querySelectorAll('.for-image');
//   this.textInPromise = container.querySelectorAll('.content-in-progressbar');
//   this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
//   this.hideProgress = function(){
//   self.indicator.style.width = "0";
//   }
  
//   this.hideEl = function(el){
//         el.style.width = "0";
//     el.style.padding = "0";
//     el.style.height = "0";
//   }
  
//   this.hideImages = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.imagesInPromise.length; i++){
//           self.hideEl(self.imagesInPromise[i]);
//       }
//     }    
//   }
  
//   this.hideText = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.textInPromise.length; i++){
//           self.hideEl(self.textInPromise[i]);
//       }
//     } 
//   }
  
//   this.hideHeders = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.headsInPromise.length; i++){
//           self.hideEl(self.headsInPromise[i]);
//       }
//     }
// }
  
  
//   let promise = new Promise((resolve, reject) => {
//   resolve(self.btn.addEventListener('click', self.hideProgress))
//   });
//   promise.then(function(){
//   return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideImages();
//   }))
//   }).then(function(){
//   return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideText();
//   }))
// }).then(function(){
//   return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideHeders();
//   }))
// })
  

// };

// let forFirstProgressbar = new HideElements('.first-progressbar', true);
// let forSecondProgressbar = new HideElements('.second-progressbar', false);

document.getElementById('sidebar-button').onclick = function() {
	display = document.getElementById('sidebar-wrapper').style.display; 
  	if (display == 'none') {
   	    document.getElementById('sidebar-wrapper').style.display = 'block';
		document.getElementById('sidebar-button').style.left = '';
   	} else {
   	    document.getElementById('sidebar-wrapper').style.display = 'none';
		document.getElementById('sidebar-button').style.left = '17px';
   	};
}

let addingSlider = document.querySelector('.adding-slider');
let addingTable = document.querySelector('.adding-table');
let addingFirstProgressbar = document.querySelector('.adding-first-progressbar');
let addingSecondProgressbar = document.querySelector('.adding-second-progressbar');


let slider = document.getElementById('first-slider');
let secondSlider = document.getElementById('another-slider');
let tableArea = document.querySelector('.table-area');
let firstProgressbar = document.querySelector('.first-progressbar');
let secondProgressbar = document.querySelector('.second-progressbar');

function showBlockTableArea() {
	tableArea.style.display = 'block';
	slider.style.display = '';
	secondSlider.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
};
addingTable.addEventListener('click', showBlockTableArea);

function showBlockSlider() {
	slider.style.display = 'block';
	secondSlider.style.display = 'block';
	tableArea.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
}
addingSlider.addEventListener('click', showBlockSlider);

function showFirstProgressbar() {
	firstProgressbar.style.display = 'block';
	secondProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
}
addingFirstProgressbar.addEventListener('click', showFirstProgressbar);

function showSecondProgressbar() {
	secondProgressbar.style.display = 'block';
	firstProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
};
addingSecondProgressbar.addEventListener('click', showSecondProgressbar);

function Slidebox(parent){
  this.container = document.querySelector(parent);
  let items = this.container.getElementsByTagName('figure');
  let counter = 0; 
  let timerId;
  let controlItems = document.querySelectorAll('.controls-item button');
  this.arrows = document.querySelector('.arrows');
  this.control = document.querySelector('.controls')
  this.currentElem = null;
  this.go = function(){
        items[counter].classList.remove('show');
        counter++;
        counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
        items[counter].classList.add('show'); 
  }
  this.start = function (){
    timerId = setInterval(this.go, 1000);
  }
  this.stop = function (){
    clearTimeout(timerId);
  }

  this.moveByArrows = function(){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');     
    counter += +event.target.getAttribute('data-direct');
    counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }

  this.moveBySwitches = function(elem){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');
    counter = elem.innerHTML - 1;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }
   
}


var firstSlider = new Slidebox('#first-slider');
var anotherSlider = new Slidebox('#another-slider');
window.addEventListener('load', firstSlider.start());

firstSlider.container.onmouseover = function(event){
  if(firstSlider.currentElem){
    return;
  }
  let figure = event.target;
  while (figure != this) {
    if (figure.tagName == 'FIGURE') break;
    figure = figure.parentNode;
  }
  if (figure == this) return;
  firstSlider.stop();
  firstSlider.currentElem = figure;
  figure.lastElementChild.style.display = "block";
}

firstSlider.container.onmouseout = function(event){
  if (!firstSlider.currentElem) return;
  var relatedTarget = event.relatedTarget;
  if(relatedTarget){
    while(relatedTarget){
    if (relatedTarget == firstSlider.currentElem) return;
      relatedTarget = relatedTarget.parentNode;
    }
  }
  firstSlider.start();
  firstSlider.currentElem.lastElementChild.style.display = '';
  firstSlider.currentElem = null;
}

anotherSlider.arrows.addEventListener('click', function(event) {
    if (!event.target.hasAttribute('data-direct')) return;
    anotherSlider.moveByArrows();
});

anotherSlider.control.addEventListener('click', function(event) {
  let target = event.target;
  if (target.tagName != 'BUTTON') return;
  anotherSlider.moveBySwitches(target);
})



let submit = document.querySelector("#submit");
submit.addEventListener('click', createTable);

function createTable(){
    let col = document.querySelector("#col").value;
    let row = document.querySelector("#row").value;
    let table = document.createElement("table");
    table.id = "myTable";
    let container = document.querySelector("#for-table");
    
    for (let i = 0; i < row; i++){
     let tr = document.createElement("tr");
     for (let j = 0; j < col; j++){
       let td = document.createElement("td");
       tr.appendChild(td);
     }
     table.appendChild(tr);
    }
    if(container.firstChild) {
        container.removeChild(container.firstChild);
    }
    container.appendChild(table);
    table.onclick = function(event) {
 	 let cell = event.target;
 	 if (cell.tagName.toLowerCase() != 'td')
 	   return;
 	 let i = cell.parentNode.rowIndex + 1;
 	 let j = cell.cellIndex + 1;
 	 alert(`${i}.${j}`);
 	}
}
function timer(id) {
    var t = document.getElementById(id).innerHTML;
	var hms = t.split(":");
	var h = parseInt(hms[0]);
	var m = parseInt(hms[1]);
	var s = parseInt(hms[2]);
	if(s == 59) {
      var s = 0;
      if(m == 59) {
        var m = 0;
		++h;
      }
      else {
		++m;
      }
	}
	else {
      ++s;
	}
    if(s < 10) {
      var s = "0" + s;
	}
	if(m < 10) {
      var m = "0" + m;
	}	
	if(h < 10) {
      var h = "0" + h;
	}
    document.getElementById(id).innerHTML = h + ':' + m + ':' + s;
}

function startTimer() {  
  timerId = setInterval('timer("my-timer")', 1000);
}
window.addEventListener('load', startTimer)

function stopTimer(){
  clearInterval(timerId)
}

let tamerBox = document.getElementById('my-timer');
tamerBox.addEventListener('mouseover', stopTimer);
tamerBox.addEventListener('mouseout', startTimer);

document.addEventListener('keydown', function(event) {
    const key = event.keyCode;
    if (key === 27) {
      tamerBox.innerHTML = "00:00:00"  
    }
});
let inputWeather = document.querySelector('.weather');
function initialize() {
      let autocomplete = new google.maps.places.Autocomplete(inputWeather);
   }
google.maps.event.addDomListener(window, 'load', initialize);



let APPID = "77e6549a0d6f421bbc4caa4dec3beb20";
let temp;
let loc;
let icon;
let humidity;
let wind;
let direction;
let city;

document.querySelector('.submit-weather').addEventListener('click', getWeather);

function update(weather) {
    icon.src = "img/codes/" + weather.code + ".png"
    humidity.innerHTML = weather.humidity;
    wind.innerHTML = weather.wind;
    direction.innerHTML = weather.direction;
    loc.innerHTML = weather.location;
    temp.innerHTML = weather.temp;
}

function getWeather() {
    temp = document.getElementById("temperature");
    loc = document.getElementById("location");
    icon = document.getElementById("icon");
    humidity = document.getElementById("humidity");
    wind = document.getElementById("wind");
    direction = document.getElementById("direction");
    city = inputWeather.value.substring(0 , inputWeather.value.indexOf(','));
    let storage = window.localStorage;
    storage.setItem('city', city);
    updateByCity(city);
}

function updateByCity(city){
    let url = "http://api.openweathermap.org/data/2.5/weather?" +
    "q=" + city +
    "&APPID=" + APPID;
    sendRequest(url);
}

function sendRequest(url){
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
        let data = JSON.parse(xmlhttp.responseText);
        let weather = {};
        weather.code = data.weather[0].id;
        weather.humidity = data.main.humidity;
        weather.wind = mph2kmph(data.wind.speed);
        weather.direction = degreesToDirection(data.wind.deg)
        weather.location = data.name;
        weather.temp = K2C(data.main.temp);     
        update(weather);
    }
    };

    xmlhttp.open("GET", url, true);
    xmlhttp.send();    
}

function degreesToDirection(degrees){
    let range = 360/16;
    let low = 360 - range/2;
    let high = (low + range) % 360;
    let angles = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"];
    for( i in angles ) {
    if(degrees >= low && degrees < high){
        return angles[i];
    }
    low = (low + range) % 360;
    high = (high + range) % 360;
    }
    return "N"; 
}

function mph2kmph(speed){
    return Math.round(speed * 1.60934);
}

function K2C(k){
    return Math.round(k - 273.15);
}
let HideElements = function(main, method){
  let self = this;
  let container = document.querySelector(main);
  let seriatim = method;
  this.btn = container.querySelector('.btn-for-promise');
  this.indicator = container.querySelector('.my-bar');
  this.imagesInPromise = container.querySelectorAll('.for-image');
  this.textInPromise = container.querySelectorAll('.content-in-progressbar');
  this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
  this.hideProgress = function(){
	self.indicator.style.width = "0";
  }
  
  this.hideEl = function(el){
        el.style.width = "0";
		el.style.padding = "0";
		el.style.height = "0";
  }
  
  this.hideImages = function(i){
    if(seriatim === true){
      for(i = 0; i < self.imagesInPromise.length; i++){
          self.hideEl(self.imagesInPromise[i]);
      }
    }else{
      self.hideEl(self.imagesInPromise[i]);
    }
  }
  
  this.hideText = function(i){
    if(seriatim === true){
      for(i = 0; i < self.textInPromise.length; i++){
          self.hideEl(self.textInPromise[i]);
      }
    } else{
      self.hideEl(self.textInPromise[i]);
    }
  }
  
  this.hideHeders = function(i){
    if(seriatim === true){
      for(i = 0; i < self.headsInPromise.length; i++){
          self.hideEl(self.headsInPromise[i]);
      }
    }else{
      self.hideEl(self.headsInPromise[i]);
    }
  }
  
  let promise = new Promise((resolve, reject) => {
	resolve(self.btn.addEventListener('click', self.hideProgress))
  });
  if(seriatim === true){
    promise.then(function(){
      return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages();
      }))
    }).then(function(){
      return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText();
      }))
    }).then(function(){
      return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders();
      }))
    })
  } else {
      promise.then(function(){
        return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(0);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(0);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(0);
        }))
      })
    
    for(let i = 1; i < self.textInPromise.length; i++){  
      promise.then(function(){
        return Promise.resolve(self.headsInPromise[i - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(i);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(i);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(i);
        }))
      })
    }
  }
};


let forFirstProgressbar = new HideElements('.first-progressbar', true);
let forSecondProgressbar = new HideElements('.second-progressbar', false);





// let HideElements = function(main, method){
//   let self = this;
//   let container = document.querySelector(main);
//   let seriatim = method;
//   this.btn = container.querySelector('.btn-for-promise');
//   this.indicator = container.querySelector('.my-bar');
//   this.imagesInPromise = container.querySelectorAll('.for-image');
//   this.textInPromise = container.querySelectorAll('.content-in-progressbar');
//   this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
//   this.hideProgress = function(){
//   self.indicator.style.width = "0";
//   }
  
//   this.hideEl = function(el){
//         el.style.width = "0";
//     el.style.padding = "0";
//     el.style.height = "0";
//   }
  
//   this.hideImages = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.imagesInPromise.length; i++){
//           self.hideEl(self.imagesInPromise[i]);
//       }
//     }    
//   }
  
//   this.hideText = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.textInPromise.length; i++){
//           self.hideEl(self.textInPromise[i]);
//       }
//     } 
//   }
  
//   this.hideHeders = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.headsInPromise.length; i++){
//           self.hideEl(self.headsInPromise[i]);
//       }
//     }
// }
  
  
//   let promise = new Promise((resolve, reject) => {
//   resolve(self.btn.addEventListener('click', self.hideProgress))
//   });
//   promise.then(function(){
//   return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideImages();
//   }))
//   }).then(function(){
//   return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideText();
//   }))
// }).then(function(){
//   return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideHeders();
//   }))
// })
  

// };

// let forFirstProgressbar = new HideElements('.first-progressbar', true);
// let forSecondProgressbar = new HideElements('.second-progressbar', false);

document.getElementById('sidebar-button').onclick = function() {
	display = document.getElementById('sidebar-wrapper').style.display; 
  	if (display == 'none') {
   	    document.getElementById('sidebar-wrapper').style.display = 'block';
		document.getElementById('sidebar-button').style.left = '';
   	} else {
   	    document.getElementById('sidebar-wrapper').style.display = 'none';
		document.getElementById('sidebar-button').style.left = '17px';
   	};
}

let addingSlider = document.querySelector('.adding-slider');
let addingTable = document.querySelector('.adding-table');
let addingFirstProgressbar = document.querySelector('.adding-first-progressbar');
let addingSecondProgressbar = document.querySelector('.adding-second-progressbar');


let slider = document.getElementById('first-slider');
let secondSlider = document.getElementById('another-slider');
let tableArea = document.querySelector('.table-area');
let firstProgressbar = document.querySelector('.first-progressbar');
let secondProgressbar = document.querySelector('.second-progressbar');

function showBlockTableArea() {
	tableArea.style.display = 'block';
	slider.style.display = '';
	secondSlider.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
};
addingTable.addEventListener('click', showBlockTableArea);

function showBlockSlider() {
	slider.style.display = 'block';
	secondSlider.style.display = 'block';
	tableArea.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
}
addingSlider.addEventListener('click', showBlockSlider);

function showFirstProgressbar() {
	firstProgressbar.style.display = 'block';
	secondProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
}
addingFirstProgressbar.addEventListener('click', showFirstProgressbar);

function showSecondProgressbar() {
	secondProgressbar.style.display = 'block';
	firstProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
};
addingSecondProgressbar.addEventListener('click', showSecondProgressbar);

function Slidebox(parent){
  this.container = document.querySelector(parent);
  let items = this.container.getElementsByTagName('figure');
  let counter = 0; 
  let timerId;
  let controlItems = document.querySelectorAll('.controls-item button');
  this.arrows = document.querySelector('.arrows');
  this.control = document.querySelector('.controls')
  this.currentElem = null;
  this.go = function(){
        items[counter].classList.remove('show');
        counter++;
        counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
        items[counter].classList.add('show'); 
  }
  this.start = function (){
    timerId = setInterval(this.go, 1000);
  }
  this.stop = function (){
    clearTimeout(timerId);
  }

  this.moveByArrows = function(){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');     
    counter += +event.target.getAttribute('data-direct');
    counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }

  this.moveBySwitches = function(elem){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');
    counter = elem.innerHTML - 1;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }
   
}


var firstSlider = new Slidebox('#first-slider');
var anotherSlider = new Slidebox('#another-slider');
window.addEventListener('load', firstSlider.start());

firstSlider.container.onmouseover = function(event){
  if(firstSlider.currentElem){
    return;
  }
  let figure = event.target;
  while (figure != this) {
    if (figure.tagName == 'FIGURE') break;
    figure = figure.parentNode;
  }
  if (figure == this) return;
  firstSlider.stop();
  firstSlider.currentElem = figure;
  figure.lastElementChild.style.display = "block";
}

firstSlider.container.onmouseout = function(event){
  if (!firstSlider.currentElem) return;
  var relatedTarget = event.relatedTarget;
  if(relatedTarget){
    while(relatedTarget){
    if (relatedTarget == firstSlider.currentElem) return;
      relatedTarget = relatedTarget.parentNode;
    }
  }
  firstSlider.start();
  firstSlider.currentElem.lastElementChild.style.display = '';
  firstSlider.currentElem = null;
}

anotherSlider.arrows.addEventListener('click', function(event) {
    if (!event.target.hasAttribute('data-direct')) return;
    anotherSlider.moveByArrows();
});

anotherSlider.control.addEventListener('click', function(event) {
  let target = event.target;
  if (target.tagName != 'BUTTON') return;
  anotherSlider.moveBySwitches(target);
})



let submit = document.querySelector("#submit");
submit.addEventListener('click', createTable);

function createTable(){
    let col = document.querySelector("#col").value;
    let row = document.querySelector("#row").value;
    let table = document.createElement("table");
    table.id = "myTable";
    let container = document.querySelector("#for-table");
    
    for (let i = 0; i < row; i++){
     let tr = document.createElement("tr");
     for (let j = 0; j < col; j++){
       let td = document.createElement("td");
       tr.appendChild(td);
     }
     table.appendChild(tr);
    }
    if(container.firstChild) {
        container.removeChild(container.firstChild);
    }
    container.appendChild(table);
    table.onclick = function(event) {
 	 let cell = event.target;
 	 if (cell.tagName.toLowerCase() != 'td')
 	   return;
 	 let i = cell.parentNode.rowIndex + 1;
 	 let j = cell.cellIndex + 1;
 	 alert(`${i}.${j}`);
 	}
}
function timer(id) {
    var t = document.getElementById(id).innerHTML;
	var hms = t.split(":");
	var h = parseInt(hms[0]);
	var m = parseInt(hms[1]);
	var s = parseInt(hms[2]);
	if(s == 59) {
      var s = 0;
      if(m == 59) {
        var m = 0;
		++h;
      }
      else {
		++m;
      }
	}
	else {
      ++s;
	}
    if(s < 10) {
      var s = "0" + s;
	}
	if(m < 10) {
      var m = "0" + m;
	}	
	if(h < 10) {
      var h = "0" + h;
	}
    document.getElementById(id).innerHTML = h + ':' + m + ':' + s;
}

function startTimer() {  
  timerId = setInterval('timer("my-timer")', 1000);
}
window.addEventListener('load', startTimer)

function stopTimer(){
  clearInterval(timerId)
}

let tamerBox = document.getElementById('my-timer');
tamerBox.addEventListener('mouseover', stopTimer);
tamerBox.addEventListener('mouseout', startTimer);

document.addEventListener('keydown', function(event) {
    const key = event.keyCode;
    if (key === 27) {
      tamerBox.innerHTML = "00:00:00"  
    }
});
let inputWeather = document.querySelector('.weather');
function initialize() {
      let autocomplete = new google.maps.places.Autocomplete(inputWeather);
   }
google.maps.event.addDomListener(window, 'load', initialize);



let APPID = "77e6549a0d6f421bbc4caa4dec3beb20";
let temp;
let loc;
let icon;
let humidity;
let wind;
let direction;
let city;

document.querySelector('.submit-weather').addEventListener('click', getWeather);

function update(weather) {
    icon.src = "img/codes/" + weather.code + ".png"
    humidity.innerHTML = weather.humidity;
    wind.innerHTML = weather.wind;
    direction.innerHTML = weather.direction;
    loc.innerHTML = weather.location;
    temp.innerHTML = weather.temp;
}

function getWeather() {
    temp = document.getElementById("temperature");
    loc = document.getElementById("location");
    icon = document.getElementById("icon");
    humidity = document.getElementById("humidity");
    wind = document.getElementById("wind");
    direction = document.getElementById("direction");
    city = inputWeather.value.substring(0 , inputWeather.value.indexOf(','));
    let storage = window.localStorage;
    storage.setItem('city', city);
    updateByCity(city);
}

function updateByCity(city){
    let url = "http://api.openweathermap.org/data/2.5/weather?" +
    "q=" + city +
    "&APPID=" + APPID;
    sendRequest(url);
}

function sendRequest(url){
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
        let data = JSON.parse(xmlhttp.responseText);
        let weather = {};
        weather.code = data.weather[0].id;
        weather.humidity = data.main.humidity;
        weather.wind = mph2kmph(data.wind.speed);
        weather.direction = degreesToDirection(data.wind.deg)
        weather.location = data.name;
        weather.temp = K2C(data.main.temp);     
        update(weather);
    }
    };

    xmlhttp.open("GET", url, true);
    xmlhttp.send();    
}

function degreesToDirection(degrees){
    let range = 360/16;
    let low = 360 - range/2;
    let high = (low + range) % 360;
    let angles = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"];
    for( i in angles ) {
    if(degrees >= low && degrees < high){
        return angles[i];
    }
    low = (low + range) % 360;
    high = (high + range) % 360;
    }
    return "N"; 
}

function mph2kmph(speed){
    return Math.round(speed * 1.60934);
}

function K2C(k){
    return Math.round(k - 273.15);
}
let HideElements = function(main, method){
  let self = this;
  let container = document.querySelector(main);
  let seriatim = method;
  this.btn = container.querySelector('.btn-for-promise');
  this.indicator = container.querySelector('.my-bar');
  this.imagesInPromise = container.querySelectorAll('.for-image');
  this.textInPromise = container.querySelectorAll('.content-in-progressbar');
  this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
  this.hideProgress = function(){
	self.indicator.style.width = "0";
  }
  
  this.hideEl = function(el){
        el.style.width = "0";
		el.style.padding = "0";
		el.style.height = "0";
  }
  
  this.hideImages = function(i){
    if(seriatim === true){
      for(i = 0; i < self.imagesInPromise.length; i++){
          self.hideEl(self.imagesInPromise[i]);
      }
    }else{
      self.hideEl(self.imagesInPromise[i]);
    }
  }
  
  this.hideText = function(i){
    if(seriatim === true){
      for(i = 0; i < self.textInPromise.length; i++){
          self.hideEl(self.textInPromise[i]);
      }
    } else{
      self.hideEl(self.textInPromise[i]);
    }
  }
  
  this.hideHeders = function(i){
    if(seriatim === true){
      for(i = 0; i < self.headsInPromise.length; i++){
          self.hideEl(self.headsInPromise[i]);
      }
    }else{
      self.hideEl(self.headsInPromise[i]);
    }
  }
  
  let promise = new Promise((resolve, reject) => {
	resolve(self.btn.addEventListener('click', self.hideProgress))
  });
  if(seriatim === true){
    promise.then(function(){
      return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages();
      }))
    }).then(function(){
      return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText();
      }))
    }).then(function(){
      return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders();
      }))
    })
  } else {
      promise.then(function(){
        return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(0);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(0);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(0);
        }))
      })
    
    for(let i = 1; i < self.textInPromise.length; i++){  
      promise.then(function(){
        return Promise.resolve(self.headsInPromise[i - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(i);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(i);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(i);
        }))
      })
    }
  }
};


let forFirstProgressbar = new HideElements('.first-progressbar', true);
let forSecondProgressbar = new HideElements('.second-progressbar', false);





// let HideElements = function(main, method){
//   let self = this;
//   let container = document.querySelector(main);
//   let seriatim = method;
//   this.btn = container.querySelector('.btn-for-promise');
//   this.indicator = container.querySelector('.my-bar');
//   this.imagesInPromise = container.querySelectorAll('.for-image');
//   this.textInPromise = container.querySelectorAll('.content-in-progressbar');
//   this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
//   this.hideProgress = function(){
//   self.indicator.style.width = "0";
//   }
  
//   this.hideEl = function(el){
//         el.style.width = "0";
//     el.style.padding = "0";
//     el.style.height = "0";
//   }
  
//   this.hideImages = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.imagesInPromise.length; i++){
//           self.hideEl(self.imagesInPromise[i]);
//       }
//     }    
//   }
  
//   this.hideText = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.textInPromise.length; i++){
//           self.hideEl(self.textInPromise[i]);
//       }
//     } 
//   }
  
//   this.hideHeders = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.headsInPromise.length; i++){
//           self.hideEl(self.headsInPromise[i]);
//       }
//     }
// }
  
  
//   let promise = new Promise((resolve, reject) => {
//   resolve(self.btn.addEventListener('click', self.hideProgress))
//   });
//   promise.then(function(){
//   return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideImages();
//   }))
//   }).then(function(){
//   return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideText();
//   }))
// }).then(function(){
//   return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideHeders();
//   }))
// })
  

// };

// let forFirstProgressbar = new HideElements('.first-progressbar', true);
// let forSecondProgressbar = new HideElements('.second-progressbar', false);

document.getElementById('sidebar-button').onclick = function() {
	display = document.getElementById('sidebar-wrapper').style.display; 
  	if (display == 'none') {
   	    document.getElementById('sidebar-wrapper').style.display = 'block';
		document.getElementById('sidebar-button').style.left = '';
   	} else {
   	    document.getElementById('sidebar-wrapper').style.display = 'none';
		document.getElementById('sidebar-button').style.left = '17px';
   	};
}

let addingSlider = document.querySelector('.adding-slider');
let addingTable = document.querySelector('.adding-table');
let addingFirstProgressbar = document.querySelector('.adding-first-progressbar');
let addingSecondProgressbar = document.querySelector('.adding-second-progressbar');


let slider = document.getElementById('first-slider');
let secondSlider = document.getElementById('another-slider');
let tableArea = document.querySelector('.table-area');
let firstProgressbar = document.querySelector('.first-progressbar');
let secondProgressbar = document.querySelector('.second-progressbar');

function showBlockTableArea() {
	tableArea.style.display = 'block';
	slider.style.display = '';
	secondSlider.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
};
addingTable.addEventListener('click', showBlockTableArea);

function showBlockSlider() {
	slider.style.display = 'block';
	secondSlider.style.display = 'block';
	tableArea.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
}
addingSlider.addEventListener('click', showBlockSlider);

function showFirstProgressbar() {
	firstProgressbar.style.display = 'block';
	secondProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
}
addingFirstProgressbar.addEventListener('click', showFirstProgressbar);

function showSecondProgressbar() {
	secondProgressbar.style.display = 'block';
	firstProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
};
addingSecondProgressbar.addEventListener('click', showSecondProgressbar);

function Slidebox(parent){
  this.container = document.querySelector(parent);
  let items = this.container.getElementsByTagName('figure');
  let counter = 0; 
  let timerId;
  let controlItems = document.querySelectorAll('.controls-item button');
  this.arrows = document.querySelector('.arrows');
  this.control = document.querySelector('.controls')
  this.currentElem = null;
  this.go = function(){
        items[counter].classList.remove('show');
        counter++;
        counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
        items[counter].classList.add('show'); 
  }
  this.start = function (){
    timerId = setInterval(this.go, 1000);
  }
  this.stop = function (){
    clearTimeout(timerId);
  }

  this.moveByArrows = function(){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');     
    counter += +event.target.getAttribute('data-direct');
    counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }

  this.moveBySwitches = function(elem){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');
    counter = elem.innerHTML - 1;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }
   
}


var firstSlider = new Slidebox('#first-slider');
var anotherSlider = new Slidebox('#another-slider');
window.addEventListener('load', firstSlider.start());

firstSlider.container.onmouseover = function(event){
  if(firstSlider.currentElem){
    return;
  }
  let figure = event.target;
  while (figure != this) {
    if (figure.tagName == 'FIGURE') break;
    figure = figure.parentNode;
  }
  if (figure == this) return;
  firstSlider.stop();
  firstSlider.currentElem = figure;
  figure.lastElementChild.style.display = "block";
}

firstSlider.container.onmouseout = function(event){
  if (!firstSlider.currentElem) return;
  var relatedTarget = event.relatedTarget;
  if(relatedTarget){
    while(relatedTarget){
    if (relatedTarget == firstSlider.currentElem) return;
      relatedTarget = relatedTarget.parentNode;
    }
  }
  firstSlider.start();
  firstSlider.currentElem.lastElementChild.style.display = '';
  firstSlider.currentElem = null;
}

anotherSlider.arrows.addEventListener('click', function(event) {
    if (!event.target.hasAttribute('data-direct')) return;
    anotherSlider.moveByArrows();
});

anotherSlider.control.addEventListener('click', function(event) {
  let target = event.target;
  if (target.tagName != 'BUTTON') return;
  anotherSlider.moveBySwitches(target);
})



let submit = document.querySelector("#submit");
submit.addEventListener('click', createTable);

function createTable(){
    let col = document.querySelector("#col").value;
    let row = document.querySelector("#row").value;
    let table = document.createElement("table");
    table.id = "myTable";
    let container = document.querySelector("#for-table");
    
    for (let i = 0; i < row; i++){
     let tr = document.createElement("tr");
     for (let j = 0; j < col; j++){
       let td = document.createElement("td");
       tr.appendChild(td);
     }
     table.appendChild(tr);
    }
    if(container.firstChild) {
        container.removeChild(container.firstChild);
    }
    container.appendChild(table);
    table.onclick = function(event) {
 	 let cell = event.target;
 	 if (cell.tagName.toLowerCase() != 'td')
 	   return;
 	 let i = cell.parentNode.rowIndex + 1;
 	 let j = cell.cellIndex + 1;
 	 alert(`${i}.${j}`);
 	}
}
function timer(id) {
    var t = document.getElementById(id).innerHTML;
	var hms = t.split(":");
	var h = parseInt(hms[0]);
	var m = parseInt(hms[1]);
	var s = parseInt(hms[2]);
	if(s == 59) {
      var s = 0;
      if(m == 59) {
        var m = 0;
		++h;
      }
      else {
		++m;
      }
	}
	else {
      ++s;
	}
    if(s < 10) {
      var s = "0" + s;
	}
	if(m < 10) {
      var m = "0" + m;
	}	
	if(h < 10) {
      var h = "0" + h;
	}
    document.getElementById(id).innerHTML = h + ':' + m + ':' + s;
}

function startTimer() {  
  timerId = setInterval('timer("my-timer")', 1000);
}
window.addEventListener('load', startTimer)

function stopTimer(){
  clearInterval(timerId)
}

let tamerBox = document.getElementById('my-timer');
tamerBox.addEventListener('mouseover', stopTimer);
tamerBox.addEventListener('mouseout', startTimer);

document.addEventListener('keydown', function(event) {
    const key = event.keyCode;
    if (key === 27) {
      tamerBox.innerHTML = "00:00:00"  
    }
});
let inputWeather = document.querySelector('.weather');
function initialize() {
      let autocomplete = new google.maps.places.Autocomplete(inputWeather);
   }
google.maps.event.addDomListener(window, 'load', initialize);



let APPID = "77e6549a0d6f421bbc4caa4dec3beb20";
let temp;
let loc;
let icon;
let humidity;
let wind;
let direction;
let city;

document.querySelector('.submit-weather').addEventListener('click', getWeather);

function update(weather) {
    icon.src = "img/codes/" + weather.code + ".png"
    humidity.innerHTML = weather.humidity;
    wind.innerHTML = weather.wind;
    direction.innerHTML = weather.direction;
    loc.innerHTML = weather.location;
    temp.innerHTML = weather.temp;
}

function getWeather() {
    temp = document.getElementById("temperature");
    loc = document.getElementById("location");
    icon = document.getElementById("icon");
    humidity = document.getElementById("humidity");
    wind = document.getElementById("wind");
    direction = document.getElementById("direction");
    city = inputWeather.value.substring(0 , inputWeather.value.indexOf(','));
    let storage = window.localStorage;
    storage.setItem('city', city);
    updateByCity(city);
}

function updateByCity(city){
    let url = "http://api.openweathermap.org/data/2.5/weather?" +
    "q=" + city +
    "&APPID=" + APPID;
    sendRequest(url);
}

function sendRequest(url){
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
        let data = JSON.parse(xmlhttp.responseText);
        let weather = {};
        weather.code = data.weather[0].id;
        weather.humidity = data.main.humidity;
        weather.wind = mph2kmph(data.wind.speed);
        weather.direction = degreesToDirection(data.wind.deg)
        weather.location = data.name;
        weather.temp = K2C(data.main.temp);     
        update(weather);
    }
    };

    xmlhttp.open("GET", url, true);
    xmlhttp.send();    
}

function degreesToDirection(degrees){
    let range = 360/16;
    let low = 360 - range/2;
    let high = (low + range) % 360;
    let angles = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"];
    for( i in angles ) {
    if(degrees >= low && degrees < high){
        return angles[i];
    }
    low = (low + range) % 360;
    high = (high + range) % 360;
    }
    return "N"; 
}

function mph2kmph(speed){
    return Math.round(speed * 1.60934);
}

function K2C(k){
    return Math.round(k - 273.15);
}
let HideElements = function(main, method){
  let self = this;
  let container = document.querySelector(main);
  let seriatim = method;
  this.btn = container.querySelector('.btn-for-promise');
  this.indicator = container.querySelector('.my-bar');
  this.imagesInPromise = container.querySelectorAll('.for-image');
  this.textInPromise = container.querySelectorAll('.content-in-progressbar');
  this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
  this.hideProgress = function(){
	self.indicator.style.width = "0";
  }
  
  this.hideEl = function(el){
        el.style.width = "0";
		el.style.padding = "0";
		el.style.height = "0";
  }
  
  this.hideImages = function(i){
    if(seriatim === true){
      for(i = 0; i < self.imagesInPromise.length; i++){
          self.hideEl(self.imagesInPromise[i]);
      }
    }else{
      self.hideEl(self.imagesInPromise[i]);
    }
  }
  
  this.hideText = function(i){
    if(seriatim === true){
      for(i = 0; i < self.textInPromise.length; i++){
          self.hideEl(self.textInPromise[i]);
      }
    } else{
      self.hideEl(self.textInPromise[i]);
    }
  }
  
  this.hideHeders = function(i){
    if(seriatim === true){
      for(i = 0; i < self.headsInPromise.length; i++){
          self.hideEl(self.headsInPromise[i]);
      }
    }else{
      self.hideEl(self.headsInPromise[i]);
    }
  }
  
  let promise = new Promise((resolve, reject) => {
	resolve(self.btn.addEventListener('click', self.hideProgress))
  });
  if(seriatim === true){
    promise.then(function(){
      return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages();
      }))
    }).then(function(){
      return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText();
      }))
    }).then(function(){
      return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders();
      }))
    })
  } else {
      promise.then(function(){
        return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(0);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(0);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[0].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(0);
        }))
      })
    
    for(let i = 1; i < self.textInPromise.length; i++){  
      promise.then(function(){
        return Promise.resolve(self.headsInPromise[i - 1].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideImages(i);
        }))
      }).then(function(){
        return Promise.resolve(self.imagesInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideText(i);
        }))
      }).then(function(){
        return Promise.resolve(self.textInPromise[i].addEventListener('transitionend', function(event){
          event.stopPropagation();
          self.hideHeders(i);
        }))
      })
    }
  }
};


let forFirstProgressbar = new HideElements('.first-progressbar', true);
let forSecondProgressbar = new HideElements('.second-progressbar', false);





// let HideElements = function(main, method){
//   let self = this;
//   let container = document.querySelector(main);
//   let seriatim = method;
//   this.btn = container.querySelector('.btn-for-promise');
//   this.indicator = container.querySelector('.my-bar');
//   this.imagesInPromise = container.querySelectorAll('.for-image');
//   this.textInPromise = container.querySelectorAll('.content-in-progressbar');
//   this.headsInPromise = container.querySelectorAll('.article-ptomise');
  
//   this.hideProgress = function(){
//   self.indicator.style.width = "0";
//   }
  
//   this.hideEl = function(el){
//         el.style.width = "0";
//     el.style.padding = "0";
//     el.style.height = "0";
//   }
  
//   this.hideImages = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.imagesInPromise.length; i++){
//           self.hideEl(self.imagesInPromise[i]);
//       }
//     }    
//   }
  
//   this.hideText = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.textInPromise.length; i++){
//           self.hideEl(self.textInPromise[i]);
//       }
//     } 
//   }
  
//   this.hideHeders = function(){
//     if(seriatim === true){
//       for(let i = 0; i < self.headsInPromise.length; i++){
//           self.hideEl(self.headsInPromise[i]);
//       }
//     }
// }
  
  
//   let promise = new Promise((resolve, reject) => {
//   resolve(self.btn.addEventListener('click', self.hideProgress))
//   });
//   promise.then(function(){
//   return Promise.resolve(self.indicator.addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideImages();
//   }))
//   }).then(function(){
//   return Promise.resolve(self.imagesInPromise[self.imagesInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideText();
//   }))
// }).then(function(){
//   return Promise.resolve(self.textInPromise[self.textInPromise.length - 1].addEventListener('transitionend', function(event){
//     event.stopPropagation();
//     self.hideHeders();
//   }))
// })
  

// };

// let forFirstProgressbar = new HideElements('.first-progressbar', true);
// let forSecondProgressbar = new HideElements('.second-progressbar', false);

document.getElementById('sidebar-button').onclick = function() {
	display = document.getElementById('sidebar-wrapper').style.display; 
  	if (display == 'none') {
   	    document.getElementById('sidebar-wrapper').style.display = 'block';
		document.getElementById('sidebar-button').style.left = '';
   	} else {
   	    document.getElementById('sidebar-wrapper').style.display = 'none';
		document.getElementById('sidebar-button').style.left = '17px';
   	};
}

let addingSlider = document.querySelector('.adding-slider');
let addingTable = document.querySelector('.adding-table');
let addingFirstProgressbar = document.querySelector('.adding-first-progressbar');
let addingSecondProgressbar = document.querySelector('.adding-second-progressbar');


let slider = document.getElementById('first-slider');
let secondSlider = document.getElementById('another-slider');
let tableArea = document.querySelector('.table-area');
let firstProgressbar = document.querySelector('.first-progressbar');
let secondProgressbar = document.querySelector('.second-progressbar');

function showBlockTableArea() {
	tableArea.style.display = 'block';
	slider.style.display = '';
	secondSlider.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
};
addingTable.addEventListener('click', showBlockTableArea);

function showBlockSlider() {
	slider.style.display = 'block';
	secondSlider.style.display = 'block';
	tableArea.style.display = '';
	secondProgressbar.style.display = '';
	firstProgressbar.style.display = '';
}
addingSlider.addEventListener('click', showBlockSlider);

function showFirstProgressbar() {
	firstProgressbar.style.display = 'block';
	secondProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
}
addingFirstProgressbar.addEventListener('click', showFirstProgressbar);

function showSecondProgressbar() {
	secondProgressbar.style.display = 'block';
	firstProgressbar.style.display = '';
	slider.style.display = '';
	secondSlider.style.display = '';
	tableArea.style.display = '';
};
addingSecondProgressbar.addEventListener('click', showSecondProgressbar);

function Slidebox(parent){
  this.container = document.querySelector(parent);
  let items = this.container.getElementsByTagName('figure');
  let counter = 0; 
  let timerId;
  let controlItems = document.querySelectorAll('.controls-item button');
  this.arrows = document.querySelector('.arrows');
  this.control = document.querySelector('.controls')
  this.currentElem = null;
  this.go = function(){
        items[counter].classList.remove('show');
        counter++;
        counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
        items[counter].classList.add('show'); 
  }
  this.start = function (){
    timerId = setInterval(this.go, 1000);
  }
  this.stop = function (){
    clearTimeout(timerId);
  }

  this.moveByArrows = function(){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');     
    counter += +event.target.getAttribute('data-direct');
    counter = counter < 0 ? items.length - 1 : counter == items.length ? 0 : counter;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }

  this.moveBySwitches = function(elem){
    items[counter].classList.remove('show');
    controlItems[counter].classList.remove('controls-active');
    counter = elem.innerHTML - 1;
    items[counter].classList.add('show');
    controlItems[counter].classList.add('controls-active');
  }
   
}


var firstSlider = new Slidebox('#first-slider');
var anotherSlider = new Slidebox('#another-slider');
window.addEventListener('load', firstSlider.start());

firstSlider.container.onmouseover = function(event){
  if(firstSlider.currentElem){
    return;
  }
  let figure = event.target;
  while (figure != this) {
    if (figure.tagName == 'FIGURE') break;
    figure = figure.parentNode;
  }
  if (figure == this) return;
  firstSlider.stop();
  firstSlider.currentElem = figure;
  figure.lastElementChild.style.display = "block";
}

firstSlider.container.onmouseout = function(event){
  if (!firstSlider.currentElem) return;
  var relatedTarget = event.relatedTarget;
  if(relatedTarget){
    while(relatedTarget){
    if (relatedTarget == firstSlider.currentElem) return;
      relatedTarget = relatedTarget.parentNode;
    }
  }
  firstSlider.start();
  firstSlider.currentElem.lastElementChild.style.display = '';
  firstSlider.currentElem = null;
}

anotherSlider.arrows.addEventListener('click', function(event) {
    if (!event.target.hasAttribute('data-direct')) return;
    anotherSlider.moveByArrows();
});

anotherSlider.control.addEventListener('click', function(event) {
  let target = event.target;
  if (target.tagName != 'BUTTON') return;
  anotherSlider.moveBySwitches(target);
})



let submit = document.querySelector("#submit");
submit.addEventListener('click', createTable);

function createTable(){
    let col = document.querySelector("#col").value;
    let row = document.querySelector("#row").value;
    let table = document.createElement("table");
    table.id = "myTable";
    let container = document.querySelector("#for-table");
    
    for (let i = 0; i < row; i++){
     let tr = document.createElement("tr");
     for (let j = 0; j < col; j++){
       let td = document.createElement("td");
       tr.appendChild(td);
     }
     table.appendChild(tr);
    }
    if(container.firstChild) {
        container.removeChild(container.firstChild);
    }
    container.appendChild(table);
    table.onclick = function(event) {
 	 let cell = event.target;
 	 if (cell.tagName.toLowerCase() != 'td')
 	   return;
 	 let i = cell.parentNode.rowIndex + 1;
 	 let j = cell.cellIndex + 1;
 	 alert(`${i}.${j}`);
 	}
}
function timer(id) {
    var t = document.getElementById(id).innerHTML;
	var hms = t.split(":");
	var h = parseInt(hms[0]);
	var m = parseInt(hms[1]);
	var s = parseInt(hms[2]);
	if(s == 59) {
      var s = 0;
      if(m == 59) {
        var m = 0;
		++h;
      }
      else {
		++m;
      }
	}
	else {
      ++s;
	}
    if(s < 10) {
      var s = "0" + s;
	}
	if(m < 10) {
      var m = "0" + m;
	}	
	if(h < 10) {
      var h = "0" + h;
	}
    document.getElementById(id).innerHTML = h + ':' + m + ':' + s;
}

function startTimer() {  
  timerId = setInterval('timer("my-timer")', 1000);
}
window.addEventListener('load', startTimer)

function stopTimer(){
  clearInterval(timerId)
}

let tamerBox = document.getElementById('my-timer');
tamerBox.addEventListener('mouseover', stopTimer);
tamerBox.addEventListener('mouseout', startTimer);

document.addEventListener('keydown', function(event) {
    const key = event.keyCode;
    if (key === 27) {
      tamerBox.innerHTML = "00:00:00"  
    }
});
let inputWeather = document.querySelector('.weather');
function initialize() {
      let autocomplete = new google.maps.places.Autocomplete(inputWeather);
   }
google.maps.event.addDomListener(window, 'load', initialize);



let APPID = "77e6549a0d6f421bbc4caa4dec3beb20";
let temp;
let loc;
let icon;
let humidity;
let wind;
let direction;
let city;

document.querySelector('.submit-weather').addEventListener('click', getWeather);

function update(weather) {
    icon.src = "img/codes/" + weather.code + ".png"
    humidity.innerHTML = weather.humidity;
    wind.innerHTML = weather.wind;
    direction.innerHTML = weather.direction;
    loc.innerHTML = weather.location;
    temp.innerHTML = weather.temp;
}

function getWeather() {
    temp = document.getElementById("temperature");
    loc = document.getElementById("location");
    icon = document.getElementById("icon");
    humidity = document.getElementById("humidity");
    wind = document.getElementById("wind");
    direction = document.getElementById("direction");
    city = inputWeather.value.substring(0 , inputWeather.value.indexOf(','));
    let storage = window.localStorage;
    storage.setItem('city', city);
    updateByCity(city);
}

function updateByCity(city){
    let url = "http://api.openweathermap.org/data/2.5/weather?" +
    "q=" + city +
    "&APPID=" + APPID;
    sendRequest(url);
}

function sendRequest(url){
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
        let data = JSON.parse(xmlhttp.responseText);
        let weather = {};
        weather.code = data.weather[0].id;
        weather.humidity = data.main.humidity;
        weather.wind = mph2kmph(data.wind.speed);
        weather.direction = degreesToDirection(data.wind.deg)
        weather.location = data.name;
        weather.temp = K2C(data.main.temp);     
        update(weather);
    }
    };

    xmlhttp.open("GET", url, true);
    xmlhttp.send();    
}

function degreesToDirection(degrees){
    let range = 360/16;
    let low = 360 - range/2;
    let high = (low + range) % 360;
    let angles = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"];
    for( i in angles ) {
    if(degrees >= low && degrees < high){
        return angles[i];
    }
    low = (low + range) % 360;
    high = (high + range) % 360;
    }
    return "N"; 
}

function mph2kmph(speed){
    return Math.round(speed * 1.60934);
}

function K2C(k){
    return Math.round(k - 273.15);
}